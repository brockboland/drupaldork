<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://drupaldork.com"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>Drupal Dork - Module Development</title>
 <link>http://drupaldork.com/category/category/module-development</link>
 <description></description>
 <language>en</language>
<item>
 <title>DOPE #1: Simplenews Threaded Send</title>
 <link>http://drupaldork.com/2011/05/dope-1-simplenews-threaded-send</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&lt;strong&gt;tl;dr: I release &lt;a href=&quot;http://drupal.org/project/simplenews_threaded_send&quot;&gt;Simplenews Threaded Send&lt;/a&gt; this weekend.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let me start by saying that I love working for &lt;a href=&quot;http://www.jacksonriver.com/&quot;&gt;Jackson River&lt;/a&gt;. About a month ago, management anounced that we would be trying out a monthly Day of Personal Enrichment, not unlike Google&#039;s 20% time, but more realistic - who can afford to spend a day a week goofing around? We&#039;ve staggered them so that the whole company doesn&#039;t shut down for a day at a time, so my first DOPE was this past Friday and I wrapped up my project over the weekend.&lt;/p&gt;
&lt;p&gt;First, a little back story. Last year, we rebuilt the site of a member of the US House of Representatives. One of their larger requirments was to implement a mass-mailer that could be used to send daily updates to other party members and constituents - several thousand emails per day, in total. They had several SMTP servers that had been sending these mailings for some time, so we were able to continue using them without worrying about getting blacklisted as spammers by mail services. We decided to use the &lt;a href=&quot;http://drupal.org/project/simplenews&quot;&gt;Simplenews&lt;/a&gt; and &lt;a href=&quot;http://drupal.org/project/smtp&quot;&gt;SMTP Authentication Support&lt;/a&gt; modules to meet this requirement, but had to work around a few limitations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
		Simlpenews sends messags during cron, one message at a time.&lt;/li&gt;
&lt;li&gt;
		Drupal sets a semaphore variable during a cron run to ensure that only one cron process can be running at once.&lt;/li&gt;
&lt;li&gt;
		Simplenews relied on this assumption, and did nothing to mark the batch of messages that were in progress.&lt;/li&gt;
&lt;li&gt;
		A bug in &lt;a href=&quot;http://drupal.org/project/poormanscron&quot;&gt;Poormanscron&lt;/a&gt; exposed this problem in Simplenews: when two cron processes were allowed to run at once, &lt;a href=&quot;http://drupal.org/node/361071&quot;&gt;multiple copies of the messages were sent&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
		The SMTP Authentication Support module only handled a single SMTP server.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;
	Customizations&lt;/h2&gt;
&lt;p&gt;
	To get around these limitations and assumptions, I did the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
		Wrote a Multi SMTP module that allows multiple servers to be configured. It sits on top of the existing SMTP module, and just sets variables used by that module to determine which server to send mail to.&lt;/li&gt;
&lt;li&gt;
		Wrote a Simplenews Threaded Send module that would start a new thread for each SMTP server. Each of these child processes would send a single batch of messages to one SMTP server.&lt;/li&gt;
&lt;li&gt;
		Made some modifications to the Simplenews module to set a flag on messages that were in the process of being sent, to prevent duplicates.&lt;/li&gt;
&lt;li&gt;
		Implemented other modules for some custom functionality: global unsubscribe, creating a user record for newsletter subscribers (Simplenews doesn&#039;t require a record in the users table), etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
	After ironing out the kinks, this solution has been working great for the client for several months. They&#039;ve been really happy, and after showing it off, told us that other offices in the House were interested in making use of it.&lt;/p&gt;
&lt;h2&gt;
	DOPE project, and how it works&lt;/h2&gt;
&lt;p&gt;
	Which brings us, finally, to my DOPE project: refactoring Simplenews Threaded Send for public release. Don&#039;t Hack Contrib is only one step below Don&#039;t Hack Core, so I wanted to find a way to wrap the changes I had made to Simplenews into my module so that it could be installed and used without any hacks, like requiring patches to Simplenews.&lt;/p&gt;
&lt;p&gt;
	I had started this process months ago on my own time, but was never able to make time to wrap it up, so it was the perfect project for a DOPE. I spent Friday and part of this weekend moving Simplenews customizations into Simplenews Threaded Send, ripping out the functionality specific to the client, and testing the hell out of it.&lt;/p&gt;
&lt;p&gt;
	At the core, this module is based on socket connections. A Thread class (written by a former co-worker) adds pseudo-threading by opening new connections to the server. For each SMTP server that&#039;s avaialable, the module will create a Thread object. When &lt;code&gt;start()&lt;/code&gt; is called on the object, it opens a socket connection back to the same server, to a URL defined by this module with a callback that will send a batch of email. The Thread object writes the request headers to the socket and then returns, so that the module can continue processing without waiting for the response (which takes several seconds, since the &quot;child&quot; process is sending a batch of email). This way, multiple threads can be processing in parallelâ€¦sort of.&lt;/p&gt;
&lt;p&gt;
	At half-second intervals, each thread is polled to see if the response has fully loaded. If it has, the Thread object is re-used to open another connection, until the whole message queue has been sent. This will work around slow SMTP servers: while the thread that&#039;s sending on the slow server waits for the batch to finish, the other threads may be able to send two or three batches. A slow server won&#039;t hold up the whole process.&lt;/p&gt;
&lt;p&gt;
	If an SMTP server fails to send, it will be marked as &quot;inactive&quot; for four hours. This was added to prevent the module from trying over and over to use a server that&#039;s not available: occasionally, an SMTP server would get overloaded, restarted by someone else, or otherwise become unavailable for a time, so we just gave it a cooling period before attempting to use it again. Any messages that had been &quot;claimed&quot; by the thread for that server will be freed up after an hour, so that another server can process them during a later cron run.&lt;/p&gt;
&lt;h2&gt;
	Updates and Cleanup&lt;/h2&gt;
&lt;p&gt;
	Cleaning this up for release required several changes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
		Removed the cURL fallback method. Early on, we had some issues with SELinux on the server blocking socket connections, and had to use cURL to make the queries as a fallback method. But, I couldn&#039;t find a way to open a cURL connection and let processing continue without completing the response. I could open connections on multiple servers at one time, but had to wait for all of them to finish before sending another round of batches through. This meant that the faster servers would sit idle while a slow server was finishing its batch. Thankfully, the SELinux configuration was fixed, so this method was only in use for a little while. I didn&#039;t even want to include it in the released module, so I pulled it all out.&lt;/li&gt;
&lt;li&gt;
		Moved Simplenews customizations into Simplenews Threaded Send. This meant copying some functions from Simplenews into the module to be renamed and modified slightly. For example &lt;code&gt;simplenews_threaded_send_get_spool()&lt;/code&gt; is a copy of &lt;code&gt;simplenews_get_spool()&lt;/code&gt;, but it marks the messages that are in process to prevent two threads from processing the same batch.&lt;/li&gt;
&lt;li&gt;
		Replaced a hacky &lt;code&gt;$send_full_spool&lt;/code&gt; bool flag with a proper &lt;code&gt;$batch_size&lt;/code&gt; int argument. Before starting the full send process, the module will send one message on each SMTP server. This will cause unavailable servers to be marked as inactive for the next four hours, so that it won&#039;t waste time trying to process an entire batch against a server that&#039;s just timing out. This argument never really made sense, especially because it would cause the &lt;code&gt;simplenews_throttle&lt;/code&gt; variable to be set to 1 for one run, then re-set to what it was before - very hacky. The new &lt;code&gt;$batch_size&lt;/code&gt; argument gets passed down the processing stack, which makes it easier to override later on for other reasons.&lt;/li&gt;
&lt;li&gt;
		Implemented &lt;code&gt;hook_schema_alter()&lt;/code&gt; to handle new columns needed in &lt;code&gt;simplenews_mail_spool&lt;/code&gt; table. Previously, these changes were just made right in the Simplenews module.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
	While I was at it, I also updated the Multi SMTP module to give more helpful messages to admins, and to add a check for the necessary &lt;a href=&quot;http://phpmailer.worxware.com/&quot;&gt;PHPMailer&lt;/a&gt; library used by the SMTP Authentication Support module. These modules can be found here:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
		&lt;a href=&quot;http://drupal.org/project/simplenews_threaded_send&quot;&gt;Simplenews Threaded Send&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://drupal.org/project/multi_smtp&quot;&gt;Multi SMTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;
	Release Plan&lt;/h2&gt;
&lt;p&gt;
	The version of Simplenews Threaded Send that&#039;s available on drupal.org right now is marked as 6.x-1.0-beta2. While the client has been using the module successfully for a number of months, so much refactoring was done that I would like for it to get some more testing in the wild before I make a point release.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
 <pubDate>Sun, 01 May 2011 17:39:58 +0000</pubDate>
 <dc:creator>Brock</dc:creator>
 <guid isPermaLink="false">20 at http://drupaldork.com</guid>
 <comments>http://drupaldork.com/2011/05/dope-1-simplenews-threaded-send#comments</comments>
</item>
<item>
 <title>Search Indexing: Published vs. Unpublished</title>
 <link>http://drupaldork.com/2011/04/search-indexing-published-vs-unpublished</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;
    This week, I&#039;ve learning a thing or two about Drupal search indexing. On the search settings page (&lt;code&gt;admin/settings/search&lt;/code&gt;) for a client&#039;s site, the percentage of the site that had been indexed remained really low, even after running cron a few times. The search functionality still seemed to be working though, so I knew something weird was going on.&lt;/p&gt;
&lt;p&gt;
    What I found was that the &lt;code&gt;search_dataset&lt;/code&gt; table had well over a million records in it, so indexing was definitely happening. After checking the code used to calculate the percentage shown in the admin, I found that it only checks published nodes when determining how much content has been indexed - but, the node module chooses from &lt;strong&gt;all&lt;/strong&gt; nodes when choosig a batch to index during a cron run. Since this site had about a thousand published nodes and over 100,000 unpublished nodes (the reason for that is a different story altogether), thousands of the unpublished nodes had been indexed, but not many of the published nodes had.&lt;/p&gt;
&lt;p&gt;
    Now, the reported percentage in the admin doesn&#039;t really matter that much. I would like for it to give the client accurate information, but it was more important that a user&#039;s search would return all available results. If there are published nodes that have not been indexed, then search results will not be accurate.&lt;/p&gt;
&lt;p&gt;
    My quick solution was to make sure that published nodes would be indexed during every cron run, instead of just indexing all willy-nilly. I implemented &lt;code&gt;hook_update_index()&lt;/code&gt; by replicating &lt;code&gt;node_update_index()&lt;/code&gt;, with an extra &lt;code&gt;WHERE&lt;/code&gt; condition to restrict it to published nodes:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function mymodule_update_index() {
  $limit = (int)variable_get(&#039;search_cron_limit&#039;, 100);

  // Store the maximum possible comments per thread (used for ranking by reply count)
  variable_set(&#039;node_cron_comments_scale&#039;, 1.0 / max(1, db_result(db_query(&#039;SELECT MAX(comment_count) FROM {node_comment_statistics}&#039;))));
  variable_set(&#039;node_cron_views_scale&#039;, 1.0 / max(1, db_result(db_query(&#039;SELECT MAX(totalcount) FROM {node_counter}&#039;))));

  $sql = &quot;SELECT n.nid FROM {node} n 
    LEFT JOIN {search_dataset} d ON d.type = &#039;node&#039; AND d.sid = n.nid 
    WHERE (d.sid IS NULL OR d.reindex &amp;lt;&amp;gt; 0) AND n.status=1 
    ORDER BY d.reindex ASC, n.nid ASC&quot;;
  $result = db_query_range($sql, 0, $limit);

  while ($node = db_fetch_object($result)) {
    _node_index_node($node);
  }
}   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
    With the indexing batch limit set to 100, the site will index up to 200 nodes per cron run: the node module does a hundred nodes without concern for status, and my module takes care of 100 that are published.&lt;/p&gt;
&lt;p&gt;
    &lt;em&gt;Note: the site in question is running Drupal 6.20. It looks like this was fixed in D7: the reported percentage accounts for all nodes.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
 <pubDate>Fri, 22 Apr 2011 15:08:08 +0000</pubDate>
 <dc:creator>Brock</dc:creator>
 <guid isPermaLink="false">19 at http://drupaldork.com</guid>
</item>
<item>
 <title>Multi SMTP</title>
 <link>http://drupaldork.com/2011/02/multi-smtp</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;My first contributed module has its first release:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://drupal.org/project/multi_smtp&quot;&gt;http://drupal.org/project/multi_smtp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hurrah!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
 <pubDate>Sun, 20 Feb 2011 18:59:29 +0000</pubDate>
 <dc:creator>Brock</dc:creator>
 <guid isPermaLink="false">13 at http://drupaldork.com</guid>
</item>
<item>
 <title>CVS</title>
 <link>http://drupaldork.com/2011/02/cvs</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;&quot;BrockBoland,&lt;br /&gt;
We are pleased to inform you that your CVS account request has been approvedâ€¦&quot;&lt;/p&gt;
&lt;p&gt;Hurrah! The notice email included a list of links to documentation pages I want to read before I do anything else, and I need to figure out how to use CVS. I had been using the git migration as an excuse to put off applying for a CVS account, with the hopes that I would never even need to learn CVS, but I think I can master the basics enough to get through the next month or two.&lt;/p&gt;
&lt;p&gt;Once I get through that, the first module I post will be Multi SMTP, the one I submitted with my CVS application. It sits on top of the SMTP module and adds the option of managing multiple servers. Then, there are three or four other modules that I want to polish up before I contribute them, and I&#039;ve got ideas for a couple more that I&#039;ll need to find the time to build.&lt;/p&gt;
&lt;p&gt;In any case, I&#039;m really excited. I have been trying to get more involved in the Drupal community, and I&#039;m excited to be able to give back some of the work I&#039;ve been doing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
 <pubDate>Sat, 05 Feb 2011 15:37:33 +0000</pubDate>
 <dc:creator>Brock</dc:creator>
 <guid isPermaLink="false">12 at http://drupaldork.com</guid>
</item>
<item>
 <title>Xdebug, var_dump, and nested arrays</title>
 <link>http://drupaldork.com/2010/12/xdebug-vardump-and-nested-arrays</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;p&gt;
    Xdebug is a must-have for local development, giving you step-through debugging and nicely formatted error messages, among other things. One of the mixed blessings it brings is that it overrides &lt;code&gt;var_dump()&lt;/code&gt;. The display is a little nicer than the default, but it also cuts off at the third level of nested arrays or objects. This cuts the legs out from under Drupal developers: &lt;b&gt;everything&lt;/b&gt; in Drupal uses nested arrays, and if you&#039;re trying to debug a problem or figure out where some data is stored, chances are good that you&#039;ll need to go five or six levels deep into an array to find your answer. Thankfully, the Xdebug developers were kind enough to include a configuration settings for this: &lt;a href=&quot;http://www.xdebug.org/docs/all_settings#var_display_max_depth&quot;&gt;xdebug.var_display_max_depth&lt;/a&gt;. You can increase the depth limit by adding a line to your &lt;code&gt;php.ini&lt;/code&gt; file. I bumped the limit to 10 on my machine: &lt;code&gt;xdebug.var_display_max_depth = 10&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
 <pubDate>Thu, 23 Dec 2010 16:25:36 +0000</pubDate>
 <dc:creator>Brock</dc:creator>
 <guid isPermaLink="false">10 at http://drupaldork.com</guid>
</item>
</channel>
</rss>
